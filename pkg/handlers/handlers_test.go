package handlers

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/google/uuid"

	"github.com/openshift/node-observability-agent/pkg/runs"
	"github.com/openshift/node-observability-agent/pkg/statelocker"
)

const (
	validUID string = "dd37122b-daaf-4d75-9250-c0747e9c5c47"
)

func TestStatus(t *testing.T) {
	testCases := []struct {
		name           string
		isBusy         bool
		isError        bool
		errFileContent string
		expectedCode   int
		expectedBody   string
	}{
		{
			name:         "Service is ready, HTTP 200",
			isBusy:       false,
			isError:      false,
			expectedCode: 200,
			expectedBody: ready,
		},
		{
			name:         "Service is busy, HTTP 409",
			isBusy:       true,
			isError:      false,
			expectedCode: 409,
			expectedBody: validUID + " still running",
		},
		{
			name:           "Service is in error, HTTP 500",
			isBusy:         false,
			isError:        true,
			expectedCode:   500,
			errFileContent: "{\"ID\":\"" + validUID + "\",\"ProfilingRuns\":[{\"Type\":\"Kubelet\",\"Successful\":false,\"BeginTime\":\"2022-03-03T10:10:17.188097819Z\",\"EndTime\":\"2022-03-03T10:10:47.211572681Z\",\"Error\":\"fake error\"},{\"Type\":\"CRIO\",\"Successful\":true,\"BeginTime\":\"2022-03-03T10:10:17.188499431Z\",\"EndTime\":\"2022-03-03T10:10:47.215840909Z\",\"Error\":null}]}",
			expectedBody:   validUID + " failed",
		},
		{
			name:           "Service is in error, error file unreadable, HTTP 500",
			isBusy:         false,
			isError:        true,
			expectedCode:   500,
			errFileContent: "{\"ID" + validUID + "\",\"ProfilingRuns\":[{\"Type\":\"Kubelet\",\"Successful\":false,\"BeginTime\":\"2022-03-03T10:10:17.188097819Z\",\"EndTime\":\"2022-03-03T10:10:47.211572681Z\",\"Error\":\"fake error\"},{\"Type\":\"CRIO\",\"Successful\":true,\"BeginTime\":\"2022-03-03T10:10:17.188499431Z\",\"EndTime\":\"2022-03-03T10:10:47.215840909Z\",\"Error\":null}}",
			expectedBody:   "unable to read error file",
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			r := httptest.NewRequest("GET", "http://localhost/node-observability-status", nil)
			w := httptest.NewRecorder()
			h := NewHandlers("abc", "/tmp", "/tmp/fakeSocket", "127.0.0.1")
			var cur uuid.UUID
			if tc.isBusy {
				c, _, err := h.stateLocker.Lock()
				defer func() {
					err := h.stateLocker.Unlock()
					if err != nil {
						t.Fatal("unable to release turn")
					}
				}()
				if err != nil {
					t.Errorf("Unexpected error : %v", err)
				}
				cur = c
			}
			if tc.isError {
				// prepare an error file
				errorFile := "/tmp/agent.err"
				err := os.WriteFile(errorFile, []byte(tc.errFileContent), 0644)
				if err != nil {
					t.Error(err)
				}
				defer func() {
					if os.Remove(errorFile) != nil {
						t.Error(err)
					}
				}()
			}
			h.Status(w, r)
			resp := w.Result()

			if resp.StatusCode != tc.expectedCode {
				t.Errorf("Expected status code %d but was %d", tc.expectedCode, resp.StatusCode)
			}

			defer resp.Body.Close()

			bodyContent, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				t.Errorf("error reading response body : %v", err)
			}

			if tc.isBusy && !strings.Contains(string(bodyContent), cur.String()) {
				t.Errorf("The UID returned in the HTTP response should be contain uid %v, but was %v", cur, string(bodyContent))
			}
		})
	}
}

func TestSendUID(t *testing.T) {

	testCases := []struct {
		name         string
		expectedCode int
	}{
		{
			name:         "Nominal case, no errors",
			expectedCode: 200,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			w := httptest.NewRecorder()
			uid := uuid.MustParse(validUID)
			err := sendUID(w, uid)
			if err != nil {
				t.Errorf("error calling createAndSendUID : %v", err)
			}
			resp := w.Result()
			defer resp.Body.Close()
			if resp.StatusCode != tc.expectedCode {
				t.Errorf("Expected status code %d but was %d", tc.expectedCode, resp.StatusCode)
			}
			bodyContent, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				t.Errorf("error reading response body : %v", err)
			}
			responseRun := runs.Run{}
			err = json.Unmarshal(bodyContent, &responseRun)
			if err != nil {
				t.Errorf("error unmarshalling response body : %v", err)
			}
			if responseRun.ID != uid {
				t.Errorf("The UID returned in the HTTP response should be the same as the one generated by createAndSendUID:\n run.ID=%v, response body contained %v", uid, responseRun.ID)
			}
		})
	}
}

func TestHandleProfiling(t *testing.T) {

	testCases := []struct {
		name           string
		serverState    string
		errFileContent string
		expectedCode   int
		expectedState  statelocker.State
		expectedError  bool
	}{
		{
			name:          "Server is ready creates lock, triggers pprof for crio+kubelet and answers 200",
			serverState:   "ready",
			expectedCode:  http.StatusOK,
			expectedState: statelocker.Taken,
			expectedError: false,
		},
		{
			name:           "Server is in error should send 500 immediately",
			serverState:    "error",
			errFileContent: "{\"ID\":\"" + validUID + "\",\"ProfilingRuns\":[{\"Type\":\"Kubelet\",\"Successful\":false,\"BeginTime\":\"2022-03-03T10:10:17.188097819Z\",\"EndTime\":\"2022-03-03T10:10:47.211572681Z\",\"Error\":\"fake error\"},{\"Type\":\"CRIO\",\"Successful\":true,\"BeginTime\":\"2022-03-03T10:10:17.188499431Z\",\"EndTime\":\"2022-03-03T10:10:47.215840909Z\",\"Error\":null}]}",
			expectedCode:   http.StatusInternalServerError,
			expectedState:  statelocker.InError,
			expectedError:  false,
		},
		{
			name:           "Server is in error, error file unreadable should send 500 immediately",
			serverState:    "error",
			errFileContent: "{\"ID" + validUID + "\",\"ProfilingRuns\":{\"Type\":\"Kubelet\",\"Successful\":false,\"BeginTime\":\"2022-03-03T10:10:17.188097819Z\",\"EndTime\":\"2022-03-03T10:10:47.211572681Z\",\"Error\":\"fake error\"},{\"Type\":\"CRIO\",\"Successful\":true,\"BeginTime\":\"2022-03-03T10:10:17.188499431Z\",\"EndTime\":\"2022-03-03T10:10:47.215840909Z\",\"Error\":null}]}",
			expectedCode:   http.StatusInternalServerError,
			expectedState:  statelocker.InError,
			expectedError:  true,
		},
		{
			name:          "Server is busy should send 409 immediately",
			serverState:   "busy",
			expectedCode:  http.StatusConflict,
			expectedState: statelocker.Taken,
			expectedError: false,
		},
	}
	for _, tc := range testCases {

		t.Run(tc.name, func(t *testing.T) {
			h := NewHandlers("abc", "/tmp", "/tmp/fakeSocket", "127.0.0.1")
			r := httptest.NewRequest("GET", "http://localhost/node-observability-status", nil)
			w := httptest.NewRecorder()
			if tc.serverState == "busy" {
				_, _, err := h.stateLocker.Lock()
				defer func() {
					err := h.stateLocker.Unlock()
					if err != nil {
						t.Fatal("unable to release turn")
					}
				}()
				if err != nil {
					t.Errorf("Unexpected error : %v", err)
				}
			}
			if tc.serverState == "error" {
				// prepare an error file
				errorFile := "/tmp/agent.err"
				err := os.WriteFile(errorFile, []byte(tc.errFileContent), 0644)
				if err != nil {
					t.Error(err)
				}
				defer func() {
					if os.Remove(errorFile) != nil {
						t.Log("unable to remove file, already removed")
					}
				}()
			}
			h.HandleProfiling(w, r)
			resp := w.Result()

			if resp.StatusCode != tc.expectedCode {
				t.Errorf("Expected status code %d but was %d", tc.expectedCode, resp.StatusCode)
			}
			uid, s, err := h.stateLocker.LockInfo()
			if tc.expectedState != s {
				t.Errorf("expected state to become %s, but was %s", tc.expectedState, s)
			}
			if tc.expectedError && err == nil {
				t.Error("error was expected but none was found")
			}
			if !tc.expectedError && err != nil {
				t.Errorf("Unexpected error : %v", err)
			}
			if tc.expectedState != statelocker.InError {
				if uid == uuid.Nil {
					t.Error("uid was empty when it shouldnt")
				}
			}
		})
	}
}

func TestProcessResults(t *testing.T) {
	h := NewHandlers("abc", "/tmp", "/tmp/fakeSocket", "127.0.0.1")

	crioRunOK := runs.ExecutionRun{
		Type:       runs.CrioRun,
		Successful: true,
		BeginTime:  time.Now(),
		EndTime:    time.Now(),
		Error:      "",
	}
	crioRunKO := runs.ExecutionRun{
		Type:       runs.CrioRun,
		Successful: false,
		BeginTime:  time.Now(),
		EndTime:    time.Now(),
		Error:      "fake error",
	}
	kubeletRunOK := runs.ExecutionRun{
		Type:       runs.KubeletRun,
		Successful: true,
		BeginTime:  time.Now(),
		EndTime:    time.Now(),
		Error:      "",
	}
	kubeletRunKO := runs.ExecutionRun{
		Type:       runs.KubeletRun,
		Successful: false,
		BeginTime:  time.Now(),
		EndTime:    time.Now(),
		Error:      "fake error",
	}
	chanAllOK := make(chan runs.ExecutionRun, 2)
	chanAllOK <- kubeletRunOK
	chanAllOK <- crioRunOK

	chanCrioKO := make(chan runs.ExecutionRun, 2)
	chanCrioKO <- kubeletRunOK
	chanCrioKO <- crioRunKO

	chanKubeletKO := make(chan runs.ExecutionRun, 2)
	chanKubeletKO <- kubeletRunKO
	chanKubeletKO <- crioRunOK

	chanOnlyCrio := make(chan runs.ExecutionRun, 1)
	chanOnlyCrio <- crioRunOK

	testCases := []struct {
		name                   string
		channel                chan runs.ExecutionRun
		expectedLock           bool
		expectedError          bool
		expectedTimeout        bool
		expectedCrioSuccess    bool
		expectedKubeletSuccess bool
		expectedRunID          string
	}{
		{
			name:                   "channel with both results OK releases the lock",
			channel:                chanAllOK,
			expectedLock:           false,
			expectedError:          false,
			expectedTimeout:        false,
			expectedCrioSuccess:    true,
			expectedKubeletSuccess: true,
			expectedRunID:          validUID,
		},
		{
			name:                   "channel with crio result KO releases the lock and creates error file",
			channel:                chanCrioKO,
			expectedLock:           false,
			expectedError:          true,
			expectedTimeout:        false,
			expectedCrioSuccess:    false,
			expectedKubeletSuccess: true,
			expectedRunID:          validUID,
		},
		{
			name:                   "channel with kubelet result KO releases the lock and creates error file",
			channel:                chanKubeletKO,
			expectedLock:           false,
			expectedError:          true,
			expectedTimeout:        false,
			expectedCrioSuccess:    true,
			expectedKubeletSuccess: false,
			expectedRunID:          validUID,
		},
		{
			name:                   "channel with only crio result should be unstuck after 40s with error file",
			channel:                chanOnlyCrio,
			expectedLock:           false,
			expectedError:          true,
			expectedTimeout:        true,
			expectedCrioSuccess:    true,
			expectedKubeletSuccess: false,
			expectedRunID:          validUID,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {

			_, _, err := h.stateLocker.Lock()
			defer func() {
				err := h.stateLocker.Unlock()
				if err != nil {
					t.Fatal("unable to release turn")
				}
			}()
			if err != nil {
				t.Errorf("Unexpected error : %v", err)
			}
			defer cleanup(t)
			h.processResults(uuid.MustParse(validUID), tc.channel, 10)
			uid, s, err := h.stateLocker.LockInfo()
			if err != nil {
				t.Errorf("unexpected error : %v", err)
			}
			if !tc.expectedLock && s == statelocker.Taken {
				t.Errorf("Shouldnt be locked but was locked by %v", uid)
			}
			if tc.expectedLock && s == statelocker.Free {
				t.Errorf("Should be locked but wasnt")
			}
			if !tc.expectedError {
				_, err := os.Stat("/tmp/" + validUID + ".log")
				if err != nil {
					t.Errorf("Expected log file /tmp/%s.log but file wasnt there", validUID)
				}
				theRun, err := readRunFromFile("/tmp/" + validUID + ".log")
				if err != nil {
					t.Errorf("error reading file /tmp/%s.log: %v", validUID, err)
				}
				if theRun.ID.String() != tc.expectedRunID {
					t.Errorf("Expected log file /tmp/%s.log to contain run ID %s but was %s", validUID, theRun.ID.String(), tc.expectedRunID)
				}
				for _, aProfilingRun := range theRun.ProfilingRuns {
					if aProfilingRun.Type == runs.CrioRun {
						if aProfilingRun.Successful != tc.expectedCrioSuccess {
							t.Errorf("Expected log file /tmp/%s.log to contain crio run success = %t, but was %t", validUID, tc.expectedCrioSuccess, aProfilingRun.Successful)
						}
					}
					if aProfilingRun.Type == runs.KubeletRun {
						if aProfilingRun.Successful != tc.expectedKubeletSuccess {
							t.Errorf("Expected log file /tmp/%s.log to contain kubelet run success = %t, but was %t", validUID, tc.expectedKubeletSuccess, aProfilingRun.Successful)
						}
					}
				}
			} else {
				_, err := os.Stat("/tmp/agent.err")
				if err != nil {
					t.Errorf("Expected error file /tmp/agent.err but file wasnt there")
				}
				theRun, err := readRunFromFile("/tmp/agent.err")
				if err == nil {
					if theRun.ID.String() != tc.expectedRunID {
						t.Errorf("Expected log file /tmp/agent.err to contain run ID %s but was %s", theRun.ID.String(), tc.expectedRunID)
					}
					for _, aProfilingRun := range theRun.ProfilingRuns {
						if aProfilingRun.Type == runs.CrioRun {
							if aProfilingRun.Successful != tc.expectedCrioSuccess {
								t.Errorf("Expected log file /tmp/agent.err to contain crio run success = %t, but was %t", tc.expectedCrioSuccess, aProfilingRun.Successful)
							}
						}
						if aProfilingRun.Type == runs.KubeletRun {
							if aProfilingRun.Successful != tc.expectedKubeletSuccess {
								t.Errorf("Expected log file /tmp/agent.err to contain kubelet run success = %t, but was %t", tc.expectedKubeletSuccess, aProfilingRun.Successful)
							}
						}
						if aProfilingRun.Type == runs.UnknownRun && !tc.expectedTimeout {
							t.Error("timeout when none was expected")
						}
					}
				}
			}
		})
	}
}

func cleanup(t *testing.T) {
	_, err := os.Stat("/tmp/agent.err")
	if err == nil {
		if err := os.Remove("/tmp/agent.err"); err != nil {
			t.Error(err)
		}
	}
	_, err = os.Stat("/tmp/" + validUID + ".log")
	if err == nil {
		if err := os.Remove("/tmp/" + validUID + ".log"); err != nil {
			t.Error(err)
		}
	}
}

func readRunFromFile(fileName string) (runs.Run, error) {
	var arun *runs.Run = &runs.Run{}
	contents, err := ioutil.ReadFile(fileName)
	if err != nil {
		return *arun, err
	}
	err = json.Unmarshal(contents, arun)
	if err != nil {
		return *arun, err
	}
	return *arun, nil
}
